// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_interval_sets_start
NumericVector cpp_interval_sets_start(const List& x);
RcppExport SEXP _phinterval_cpp_interval_sets_start(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_interval_sets_start(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_interval_sets_starts
List cpp_interval_sets_starts(const List& x);
RcppExport SEXP _phinterval_cpp_interval_sets_starts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_interval_sets_starts(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_interval_sets_end
NumericVector cpp_interval_sets_end(const List& x);
RcppExport SEXP _phinterval_cpp_interval_sets_end(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_interval_sets_end(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_interval_sets_ends
List cpp_interval_sets_ends(const List& x);
RcppExport SEXP _phinterval_cpp_interval_sets_ends(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_interval_sets_ends(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_compliment_interval_sets
List cpp_compliment_interval_sets(const List& x);
RcppExport SEXP _phinterval_cpp_compliment_interval_sets(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_compliment_interval_sets(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_invert_interval_sets
List cpp_invert_interval_sets(const List& x);
RcppExport SEXP _phinterval_cpp_invert_interval_sets(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_invert_interval_sets(x));
    return rcpp_result_gen;
END_RCPP
}
// invert_interval_set
NumericMatrix invert_interval_set(NumericMatrix x);
RcppExport SEXP _phinterval_invert_interval_set(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(invert_interval_set(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_squash_lubridate_interval
RObject cpp_squash_lubridate_interval(const DatetimeVector& starts, const NumericVector& spans, bool na_rm);
RcppExport SEXP _phinterval_cpp_squash_lubridate_interval(SEXP startsSEXP, SEXP spansSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DatetimeVector& >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spans(spansSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_squash_lubridate_interval(starts, spans, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_lubridate_interval_to_interval_sets
List cpp_lubridate_interval_to_interval_sets(const DatetimeVector& starts, const NumericVector& spans);
RcppExport SEXP _phinterval_cpp_lubridate_interval_to_interval_sets(SEXP startsSEXP, SEXP spansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DatetimeVector& >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spans(spansSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lubridate_interval_to_interval_sets(starts, spans));
    return rcpp_result_gen;
END_RCPP
}
// cpp_squash_interval_set
NumericMatrix cpp_squash_interval_set(const NumericMatrix x);
RcppExport SEXP _phinterval_cpp_squash_interval_set(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_squash_interval_set(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_union_interval_sets
List cpp_union_interval_sets(const List& x, const List& y);
RcppExport SEXP _phinterval_cpp_union_interval_sets(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_union_interval_sets(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_phinterval_cpp_interval_sets_start", (DL_FUNC) &_phinterval_cpp_interval_sets_start, 1},
    {"_phinterval_cpp_interval_sets_starts", (DL_FUNC) &_phinterval_cpp_interval_sets_starts, 1},
    {"_phinterval_cpp_interval_sets_end", (DL_FUNC) &_phinterval_cpp_interval_sets_end, 1},
    {"_phinterval_cpp_interval_sets_ends", (DL_FUNC) &_phinterval_cpp_interval_sets_ends, 1},
    {"_phinterval_cpp_compliment_interval_sets", (DL_FUNC) &_phinterval_cpp_compliment_interval_sets, 1},
    {"_phinterval_cpp_invert_interval_sets", (DL_FUNC) &_phinterval_cpp_invert_interval_sets, 1},
    {"_phinterval_invert_interval_set", (DL_FUNC) &_phinterval_invert_interval_set, 1},
    {"_phinterval_cpp_squash_lubridate_interval", (DL_FUNC) &_phinterval_cpp_squash_lubridate_interval, 3},
    {"_phinterval_cpp_lubridate_interval_to_interval_sets", (DL_FUNC) &_phinterval_cpp_lubridate_interval_to_interval_sets, 2},
    {"_phinterval_cpp_squash_interval_set", (DL_FUNC) &_phinterval_cpp_squash_interval_set, 1},
    {"_phinterval_cpp_union_interval_sets", (DL_FUNC) &_phinterval_cpp_union_interval_sets, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_phinterval(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
